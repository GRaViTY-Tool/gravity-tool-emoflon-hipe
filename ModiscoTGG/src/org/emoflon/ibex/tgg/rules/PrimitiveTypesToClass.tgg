#using ModiscoTGG.*
#using AttrCondDefLibrary.*

#abstract #rule PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveType

	eModel:Model {
		++  -orphanTypes -> ePrimitiveType
	}
}

#target {
	++tPrimitiveClass:TClass {
		tLib := true
	}

	typeGraph:TypeGraph {
		++  -ownedTypes -> tPrimitiveClass
		++  -classes -> tPrimitiveClass
	}
}

#correspondence {
	++ typeToTAbstractType :TypeToTAbstractType {
		#src->ePrimitiveType
		#trg->tPrimitiveClass
	}

	++ ePrimitiveTypeToTPrimitiveClass :PrimitiveTypeToTClass {
		#src->ePrimitiveType
		#trg->tPrimitiveClass
	}

	eModelToTypeGraph :ModelToTypeGraph {
		#src->eModel
		#trg->typeGraph
	}
}

#rule PrimitiveTypeIsBoolean
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeBoolean
}

#target {
	++tPrimitiveClass:TClass {
		tName := "boolean"
	}
}

#rule PrimitiveTypeIsByte
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeByte
}

#target {
	++tPrimitiveClass:TClass {
		tName := "byte"
	}
}

#rule PrimitiveTypeIsChar
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeChar
}

#target {
	++tPrimitiveClass:TClass {
		tName := "char"
	}
}

#rule PrimitiveTypeIsDouble
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeDouble
}

#target {
	++tPrimitiveClass:TClass {
		tName := "double"
	}
}

#rule PrimitiveTypeIsFloat
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeFloat
}

#target {
	++tPrimitiveClass:TClass {
		tName := "float"
	}
}

#rule PrimitiveTypeIsInt
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeInt
}

#target {
	++tPrimitiveClass:TClass {
		tName := "int"
	}
}

#rule PrimitiveTypeIsLong
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeLong
}

#target {
	++tPrimitiveClass:TClass {
		tName := "long"
	}
}

#rule PrimitiveTypeIsShort
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeShort
}

#target {
	++tPrimitiveClass:TClass {
		tName := "short"
	}
}

#rule PrimitiveTypesIsVoid
#extends PrimitiveTypesToClass
#with ModiscoTGG

#source {
	++ePrimitiveType:PrimitiveTypeVoid
}

#target {
	++tPrimitiveClass:TClass {
		tName := "void"
	}
}
